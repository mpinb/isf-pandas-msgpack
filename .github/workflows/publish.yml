name: Publish to PyPI

on:
  release:
    types: [published]

jobs:
  build:
    name: Build and save artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up pixi environments
        uses: prefix-dev/setup-pixi@v0.8.8
        with:
          pixi-version: v0.46.0
          cache: true
          auth-host: prefix.dev
          auth-token: ${{ secrets.PREFIX_DEV_TOKEN }}
          manifest-path: pyproject.toml

      - name: Extract version from Git tag
        id: get_version
        run: |
          VERSION=${{ github.event.release.tag_name }}
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Build the package with version from Git tag
        env:
          SETUPTOOLS_SCM_PRETEND_VERSION: ${{ env.VERSION }}
        run: |
          pixi r -e build build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: dist/*

      - name: Upload env artifacts
        uses: actions/upload-artifact@v4
        if: ${{ runner.os == 'Linux' }}
        with:
          name: env
          path: |
            pyproject.toml
            pixi.lock

  upload-to-pypi:
    name: Upload source distribution and wheels to PyPI
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download env artifacts
        uses: actions/download-artifact@v4
        with:
          name: env

      - name: Set up pixi environments
        uses: prefix-dev/setup-pixi@v0.8.8
        with:
          pixi-version: v0.46.0
          cache: true
          auth-host: prefix.dev
          auth-token: ${{ secrets.PREFIX_DEV_TOKEN }}
          manifest-path: pyproject.toml
      
      - name: Download artifacts (Linux)
        uses: actions/download-artifact@v4
        with:
          name: dist-ubuntu-latest
          path: dist/linux

      - name: Download artifacts (macOS)
        uses: actions/download-artifact@v4
        with:
          name: dist-macos-latest
          path: dist/macos

      - name: Download artifacts (Windows)
        uses: actions/download-artifact@v4
        with:
          name: dist-windows-latest
          path: dist/windows

      - name: Combine all wheels
        run: |
          mkdir -p dist/all
          cp dist/linux/* dist/all/
          cp dist/macos/* dist/all/
          cp dist/windows/* dist/all/
        shell: bash

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TESTPYPI_API_TOKEN }}
        run: |
          pixi r -e build test_upload